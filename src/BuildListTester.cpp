#include "BuildListTester.hpp"
#include "Game.hpp"
#include <fstream>

BuildListTester::BuildListTester() { }
BuildListTester::~BuildListTester() {}

// Returns the Log generated by the execution of the given Build-List
vector<string> BuildListTester::testBuildList(vector<BuildStep*> list) 
{
	Game game(list);

	std::stringstream gameResultBuffer;

	// Switch cout to gameResultBuffer to capture output
	std::streambuf *originalBuffer = std::cout.rdbuf();
	std::cout.rdbuf(gameResultBuffer.rdbuf());

	// Execute Gameloop
	bool success=true;
	try {
		game.loop();
	} catch(...) {
		success = false;
	} 

	// Restore cout
	std::cout.rdbuf(originalBuffer);
	

	// Retrieve result
	vector<string> result;

	// If Buildlist was invalid, stop here
	if(!success)
		return result;

	string strBuffer = gameResultBuffer.str();
	
	while(!gameResultBuffer.eof()) {
		std::string strTemp;
		getline(gameResultBuffer, strTemp);
		result.push_back(strTemp);
	}

	return result;
}

// Analzes the Log to receive key-figures
BuildLogResult BuildListTester::analyzeBuildLog(vector<string> log, string entity, string mode) 
{
	
	BuildLogResult result;
	result.executionTime = 0;
	result.result = 0;
	
	for(auto i : log) {
		if(i.length()>0) {
		
			vector<string> parts = splitString(i, ' ');
			
			int time = atoi(parts[0].c_str());
			string type = parts[1];
			string message = parts[2];
			if(mode=="rush") {
				if(type=="build-end"&&message==entity) {
					result.result++;
				}
			} else {
				if(type=="build-end"&&message==entity) {
					result.executionTime = time;
					return result;
				}
			}
			result.executionTime = time;
		
		}
	}
	return result;
}

// Writes Log to file
void BuildListTester::writeLog(vector<string> log, string filename) 
{
	ofstream outputFile;
	outputFile.open(filename);
	for(auto l: log) {
		outputFile << l << endl;
	}
	outputFile.close();
}

// Writes BuildList to file
void BuildListTester::writeBuildList(vector<BuildStep*> list, string filename) 
{
	ofstream outputFile;
	outputFile.open(filename);
	for(auto l = list.begin(); l != list.end(); ++l) {
		outputFile << (*l)->getName() << endl;
	}
	outputFile.close();
}

vector<string>  BuildListTester::splitString(string input, char splitter) {
	vector<string> result;
	stringstream inputStream(input);
	string part;
	while(getline(inputStream, part, ' '))
		if(part!="")
			result.push_back(part);
	return result;
}